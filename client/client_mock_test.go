// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	choria "github.com/choria-io/go-choria/choria"
	go_config "github.com/choria-io/go-config"
	go_srvcache "github.com/choria-io/go-srvcache"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	reflect "reflect"
)

// MockChoriaFramework is a mock of ChoriaFramework interface
type MockChoriaFramework struct {
	ctrl     *gomock.Controller
	recorder *MockChoriaFrameworkMockRecorder
}

// MockChoriaFrameworkMockRecorder is the mock recorder for MockChoriaFramework
type MockChoriaFrameworkMockRecorder struct {
	mock *MockChoriaFramework
}

// NewMockChoriaFramework creates a new mock instance
func NewMockChoriaFramework(ctrl *gomock.Controller) *MockChoriaFramework {
	mock := &MockChoriaFramework{ctrl: ctrl}
	mock.recorder = &MockChoriaFrameworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChoriaFramework) EXPECT() *MockChoriaFrameworkMockRecorder {
	return m.recorder
}

// Configuration mocks base method
func (m *MockChoriaFramework) Configuration() *go_config.Config {
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(*go_config.Config)
	return ret0
}

// Configuration indicates an expected call of Configuration
func (mr *MockChoriaFrameworkMockRecorder) Configuration() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockChoriaFramework)(nil).Configuration))
}

// Logger mocks base method
func (m *MockChoriaFramework) Logger(arg0 string) *logrus.Entry {
	ret := m.ctrl.Call(m, "Logger", arg0)
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Logger indicates an expected call of Logger
func (mr *MockChoriaFrameworkMockRecorder) Logger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockChoriaFramework)(nil).Logger), arg0)
}

// NewRequestID mocks base method
func (m *MockChoriaFramework) NewRequestID() (string, error) {
	ret := m.ctrl.Call(m, "NewRequestID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequestID indicates an expected call of NewRequestID
func (mr *MockChoriaFrameworkMockRecorder) NewRequestID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequestID", reflect.TypeOf((*MockChoriaFramework)(nil).NewRequestID))
}

// Certname mocks base method
func (m *MockChoriaFramework) Certname() string {
	ret := m.ctrl.Call(m, "Certname")
	ret0, _ := ret[0].(string)
	return ret0
}

// Certname indicates an expected call of Certname
func (mr *MockChoriaFrameworkMockRecorder) Certname() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Certname", reflect.TypeOf((*MockChoriaFramework)(nil).Certname))
}

// MiddlewareServers mocks base method
func (m *MockChoriaFramework) MiddlewareServers() (go_srvcache.Servers, error) {
	ret := m.ctrl.Call(m, "MiddlewareServers")
	ret0, _ := ret[0].(go_srvcache.Servers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MiddlewareServers indicates an expected call of MiddlewareServers
func (mr *MockChoriaFrameworkMockRecorder) MiddlewareServers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MiddlewareServers", reflect.TypeOf((*MockChoriaFramework)(nil).MiddlewareServers))
}

// NewConnector mocks base method
func (m *MockChoriaFramework) NewConnector(ctx context.Context, servers func() (go_srvcache.Servers, error), name string, logger *logrus.Entry) (choria.Connector, error) {
	ret := m.ctrl.Call(m, "NewConnector", ctx, servers, name, logger)
	ret0, _ := ret[0].(choria.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConnector indicates an expected call of NewConnector
func (mr *MockChoriaFrameworkMockRecorder) NewConnector(ctx, servers, name, logger interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConnector", reflect.TypeOf((*MockChoriaFramework)(nil).NewConnector), ctx, servers, name, logger)
}

// MockConnector is a mock of Connector interface
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// QueueSubscribe mocks base method
func (m *MockConnector) QueueSubscribe(ctx context.Context, name, subject, group string, output chan *choria.ConnectorMessage) error {
	ret := m.ctrl.Call(m, "QueueSubscribe", ctx, name, subject, group, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe
func (mr *MockConnectorMockRecorder) QueueSubscribe(ctx, name, subject, group, output interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockConnector)(nil).QueueSubscribe), ctx, name, subject, group, output)
}

// Publish mocks base method
func (m *MockConnector) Publish(msg *choria.Message) error {
	ret := m.ctrl.Call(m, "Publish", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockConnectorMockRecorder) Publish(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockConnector)(nil).Publish), msg)
}
